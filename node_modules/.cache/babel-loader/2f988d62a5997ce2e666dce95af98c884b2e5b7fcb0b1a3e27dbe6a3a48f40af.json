{"ast":null,"code":"var _jsxFileName = \"/Users/ronili/Desktop/enter/code/weather-app/src/components/SideBar/SideBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport \"./sideBar.css\";\nimport SideBarItem from \"../sideBarItem/SideBarItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'a6013d4da00e4e93a7a110941240409';\nconst SideBar = ({\n  tempType,\n  cities,\n  setCity,\n  setCities,\n  isDarkMode\n}) => {\n  _s();\n  const [cityData, setCityData] = useState([]); // Array to hold city data\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedData = [];\n        for (let i = 0; i < cities.length; i++) {\n          const response = await fetch(`http://api.weatherapi.com/v1/forecast.json?q=${cities[i]}&key=${API_KEY}&days=10`);\n          if (!response.ok) {\n            throw new Error('City not found');\n          }\n          const result = await response.json();\n          fetchedData.push(result); // Collect data for each city\n        }\n        setCityData(fetchedData); // Set the collected data to state\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchData();\n  }, [cities]); // Refetch when cities change\n\n  if (cityData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-bar\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `city-bar ${isDarkMode ? 'dark' : 'light'}`,\n    children: cityData.map((data, index) => {\n      // Calculate local time for each city\n      const localTime = new Date(data.location.localtime);\n      const hour = localTime.getHours().toString().padStart(2, '0'); // Ensure two-digit format\n      const minute = localTime.getMinutes().toString().padStart(2, '0'); // Ensure two-digit format\n      const formattedTime = `${hour}:${minute}`;\n      return /*#__PURE__*/_jsxDEV(SideBarItem, {\n        city: data.location.name,\n        temp: tempType === 'celsius' ? data.current.temp_c : data.current.temp_f,\n        situation: data.current.condition.text,\n        minTemp: tempType === 'celsius' ? data.forecast.forecastday[0].day.mintemp_c : data.forecast.forecastday[0].day.mintemp_f,\n        maxTemp: tempType === 'celsius' ? data.forecast.forecastday[0].day.maxtemp_c : data.forecast.forecastday[0].day.maxtemp_f,\n        time: formattedTime // Pass the calculated local time as a prop\n        ,\n        setCity: setCity,\n        setCities: setCities,\n        cities: cities\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(SideBar, \"ZmJmKvDXOu2s8d3wauU/CJLewkg=\");\n_c = SideBar;\nexport default SideBar;\nvar _c;\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"names":["React","useEffect","useState","SideBarItem","jsxDEV","_jsxDEV","API_KEY","SideBar","tempType","cities","setCity","setCities","isDarkMode","_s","cityData","setCityData","fetchData","fetchedData","i","length","response","fetch","ok","Error","result","json","push","e","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","data","index","localTime","Date","location","localtime","hour","getHours","toString","padStart","minute","getMinutes","formattedTime","city","name","temp","current","temp_c","temp_f","situation","condition","text","minTemp","forecast","forecastday","day","mintemp_c","mintemp_f","maxTemp","maxtemp_c","maxtemp_f","time","_c","$RefreshReg$"],"sources":["/Users/ronili/Desktop/enter/code/weather-app/src/components/SideBar/SideBar.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./sideBar.css\";\nimport SideBarItem from \"../sideBarItem/SideBarItem\";\n\nconst API_KEY = 'a6013d4da00e4e93a7a110941240409';\n\ninterface Props {\n  tempType: string;\n  cities: string[];\n  setCity: React.Dispatch<React.SetStateAction<string>>\n  setCities: React.Dispatch<React.SetStateAction<string[]>>\n  isDarkMode: boolean\n}\n\nconst SideBar: React.FC<Props> = ({ tempType, cities, setCity, setCities, isDarkMode }) => {\n  const [cityData, setCityData] = useState<any[]>([]); // Array to hold city data\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedData = [];\n        for (let i = 0; i < cities.length; i++) {\n          const response = await fetch(`http://api.weatherapi.com/v1/forecast.json?q=${cities[i]}&key=${API_KEY}&days=10`);\n          if (!response.ok) {\n            throw new Error('City not found');\n          }\n          const result = await response.json();\n          fetchedData.push(result); // Collect data for each city\n        }\n        setCityData(fetchedData); // Set the collected data to state\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    fetchData();\n  }, [cities]); // Refetch when cities change\n\n  if (cityData.length === 0) {\n    return <div className=\"city-bar\">Loading...</div>;\n  }\n\n  return (\n    <div className={`city-bar ${isDarkMode ? 'dark' : 'light'}`}>\n      {cityData.map((data, index) => {\n        // Calculate local time for each city\n        const localTime = new Date(data.location.localtime);\n        const hour = localTime.getHours().toString().padStart(2, '0'); // Ensure two-digit format\n        const minute = localTime.getMinutes().toString().padStart(2, '0'); // Ensure two-digit format\n        const formattedTime = `${hour}:${minute}`;\n\n        return (\n          <SideBarItem\n            key={index}\n            city={data.location.name}\n            temp={tempType === 'celsius' ? data.current.temp_c : data.current.temp_f}\n            situation={data.current.condition.text}\n            minTemp={tempType === 'celsius' ? data.forecast.forecastday[0].day.mintemp_c : data.forecast.forecastday[0].day.mintemp_f}\n            maxTemp={tempType === 'celsius' ? data.forecast.forecastday[0].day.maxtemp_c : data.forecast.forecastday[0].day.maxtemp_f}\n            time={formattedTime} // Pass the calculated local time as a prop\n            setCity={setCity}\n            setCities={setCities}\n            cities={cities}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default SideBar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}