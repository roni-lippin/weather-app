{"ast":null,"code":"var _jsxFileName = \"/Users/ronili/Desktop/enter/code/weather-app/src/components/HoursTemp/HoursTemp.tsx\";\nimport React from \"react\";\nimport \"./hoursTemp.css\";\nimport HoursItem from \"../HoursItem/HoursItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst takeRelevent24Hours = data => {\n  if (!data.forecast || !data.forecast.forecastday || data.forecast.forecastday.length < 2) {\n    console.error(\"Forecast data is incomplete or not available.\");\n    return [];\n  }\n  const now = new Date(data.location.localtime);\n  const currentHour = now.getHours();\n  const todayForecastHours = data.forecast.forecastday[0].hour;\n  const nextDayForecastHours = data.forecast.forecastday[1].hour;\n\n  // Filter today's hours to include only those from the current hour onwards\n  const todayRelevantHours = todayForecastHours.filter(hour => {\n    return new Date(hour.time).getHours() >= currentHour - 1;\n  });\n\n  // Combine today's hours with the next day's hours, if needed, up to 24 hours\n  const totalHours = [...todayRelevantHours, ...nextDayForecastHours.slice(0, 24 - todayRelevantHours.length)];\n  return totalHours;\n};\nconst HoursTemp = ({\n  data,\n  tempType,\n  isDarkMode\n}) => {\n  const hoursData = takeRelevent24Hours(data);\n  hoursData[0].time = \"th Now\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"24-HOURS FORECAST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: `${isDarkMode ? 'dark' : 'light'}`,\n      children: hoursData.map(item => /*#__PURE__*/_jsxDEV(HoursItem, {\n        // Unique key\n        hour: item.time.split(\" \")[1] // Extract only the hour part (HH:mm)\n        ,\n        icon: item.condition.icon,\n        temp: tempType === 'celsius' ? item.temp_c : item.temp_f // Toggle between Celsius and Fahrenheit\n      }, item.time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = HoursTemp;\nexport default HoursTemp;\nvar _c;\n$RefreshReg$(_c, \"HoursTemp\");","map":{"version":3,"names":["React","HoursItem","jsxDEV","_jsxDEV","takeRelevent24Hours","data","forecast","forecastday","length","console","error","now","Date","location","localtime","currentHour","getHours","todayForecastHours","hour","nextDayForecastHours","todayRelevantHours","filter","time","totalHours","slice","HoursTemp","tempType","isDarkMode","hoursData","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","item","split","icon","condition","temp","temp_c","temp_f","_c","$RefreshReg$"],"sources":["/Users/ronili/Desktop/enter/code/weather-app/src/components/HoursTemp/HoursTemp.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./hoursTemp.css\"\nimport HoursItem from \"../HoursItem/HoursItem\";\n\n\ninterface Props {\n  data: any,\n  tempType: string\n  isDarkMode: boolean\n}\n\nconst takeRelevent24Hours = (data: Props['data']): any[] => {\n  if (!data.forecast || !data.forecast.forecastday || data.forecast.forecastday.length < 2) {\n    console.error(\"Forecast data is incomplete or not available.\");\n    return [];\n  }\n  const now = new Date(data.location.localtime);\n  const currentHour = now.getHours();\n  const todayForecastHours = data.forecast.forecastday[0].hour;\n  const nextDayForecastHours = data.forecast.forecastday[1].hour;\n\n  // Filter today's hours to include only those from the current hour onwards\n  const todayRelevantHours = todayForecastHours.filter((hour: any) => {\n    return new Date(hour.time).getHours() >= currentHour - 1;\n  });\n\n  // Combine today's hours with the next day's hours, if needed, up to 24 hours\n  const totalHours = [\n    ...todayRelevantHours,\n    ...nextDayForecastHours.slice(0, 24 - todayRelevantHours.length)\n  ];\n\n  return totalHours;\n};\n\nconst HoursTemp: React.FC<Props> = ({ data , tempType, isDarkMode}) => {\n  const hoursData = takeRelevent24Hours(data);\n  hoursData[0].time=\"th Now\"\n  return (\n    <div>\n    <h3>24-HOURS FORECAST</h3>\n    <ul id={`${isDarkMode ? 'dark' : 'light'}`}>\n      {hoursData.map((item: any) => (\n        <HoursItem\n          key={item.time} // Unique key\n          hour={item.time.split(\" \")[1]} // Extract only the hour part (HH:mm)\n          icon={item.condition.icon}\n          temp={tempType === 'celsius' ? item.temp_c : item.temp_f} // Toggle between Celsius and Fahrenheit\n        />\n      ))}\n    </ul>\n    </div>\n\n  );\n}\n\n\n\nexport default HoursTemp;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS/C,MAAMC,mBAAmB,GAAIC,IAAmB,IAAY;EAC1D,IAAI,CAACA,IAAI,CAACC,QAAQ,IAAI,CAACD,IAAI,CAACC,QAAQ,CAACC,WAAW,IAAIF,IAAI,CAACC,QAAQ,CAACC,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;IACxFC,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;IAC9D,OAAO,EAAE;EACX;EACA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACC,SAAS,CAAC;EAC7C,MAAMC,WAAW,GAAGJ,GAAG,CAACK,QAAQ,CAAC,CAAC;EAClC,MAAMC,kBAAkB,GAAGZ,IAAI,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAACW,IAAI;EAC5D,MAAMC,oBAAoB,GAAGd,IAAI,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAACW,IAAI;;EAE9D;EACA,MAAME,kBAAkB,GAAGH,kBAAkB,CAACI,MAAM,CAAEH,IAAS,IAAK;IAClE,OAAO,IAAIN,IAAI,CAACM,IAAI,CAACI,IAAI,CAAC,CAACN,QAAQ,CAAC,CAAC,IAAID,WAAW,GAAG,CAAC;EAC1D,CAAC,CAAC;;EAEF;EACA,MAAMQ,UAAU,GAAG,CACjB,GAAGH,kBAAkB,EACrB,GAAGD,oBAAoB,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,GAAGJ,kBAAkB,CAACZ,MAAM,CAAC,CACjE;EAED,OAAOe,UAAU;AACnB,CAAC;AAED,MAAME,SAA0B,GAAGA,CAAC;EAAEpB,IAAI;EAAGqB,QAAQ;EAAEC;AAAU,CAAC,KAAK;EACrE,MAAMC,SAAS,GAAGxB,mBAAmB,CAACC,IAAI,CAAC;EAC3CuB,SAAS,CAAC,CAAC,CAAC,CAACN,IAAI,GAAC,QAAQ;EAC1B,oBACEnB,OAAA;IAAA0B,QAAA,gBACA1B,OAAA;MAAA0B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B9B,OAAA;MAAI+B,EAAE,EAAE,GAAGP,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MAAAE,QAAA,EACxCD,SAAS,CAACO,GAAG,CAAEC,IAAS,iBACvBjC,OAAA,CAACF,SAAS;QACQ;QAChBiB,IAAI,EAAEkB,IAAI,CAACd,IAAI,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;QAAA;QAC/BC,IAAI,EAAEF,IAAI,CAACG,SAAS,CAACD,IAAK;QAC1BE,IAAI,EAAEd,QAAQ,KAAK,SAAS,GAAGU,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,MAAO,CAAC;MAAA,GAHrDN,IAAI,CAACd,IAAI;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIf,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAGV,CAAC;AAAAU,EAAA,GAnBKlB,SAA0B;AAuBhC,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}