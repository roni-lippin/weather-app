{"ast":null,"code":"var _jsxFileName = \"/Users/ronili/Desktop/enter/code/weather-app/src/components/SearchBar/SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./searchBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  setCity,\n  setCities,\n  isDarkMode\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\" && inputValue.trim() !== \"\") {\n      setCity(inputValue); // Update city state in App\n\n      setCities(cities => {\n        // Create a new array if the city is not already in the list\n        if (!cities.includes(inputValue)) {\n          return [...cities, inputValue]; // Return a new array with the new city\n        }\n        return cities; // If the city already exists, return the same array\n      });\n      setInputValue(\"\"); // Clear input field after setting city\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search city\",\n      id: `${isDarkMode ? 'dark' : 'light'}`,\n      value: inputValue,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"iEYviHCJXqr/rxvP+SpzgvyJcbo=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SearchBar","setCity","setCities","isDarkMode","_s","inputValue","setInputValue","handleChange","event","target","value","handleKeyDown","key","trim","cities","includes","className","children","type","placeholder","id","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ronili/Desktop/enter/code/weather-app/src/components/SearchBar/SearchBar.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./searchBar.css\";\n\ninterface Props {\n  setCity: React.Dispatch<React.SetStateAction<string>>,\n  setCities: React.Dispatch<React.SetStateAction<string[]>>\n  isDarkMode: boolean\n}\n\nconst SearchBar: React.FC<Props> = ({ setCity, setCities, isDarkMode }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\" && inputValue.trim() !== \"\") {\n      setCity(inputValue); // Update city state in App\n\n      setCities((cities) => {\n        // Create a new array if the city is not already in the list\n        if (!cities.includes(inputValue)) {\n          return [...cities, inputValue]; // Return a new array with the new city\n        }\n        return cities; // If the city already exists, return the same array\n      });\n\n      setInputValue(\"\"); // Clear input field after setting city\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        placeholder=\"Search city\"\n        id={`${isDarkMode ? 'dark' : 'light'}`}\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzB,MAAMC,SAA0B,GAAGA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,YAAY,GAAIC,KAA0C,IAAK;IACnEF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,aAAa,GAAIH,KAA4C,IAAK;IACtE,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,IAAIP,UAAU,CAACQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACrDZ,OAAO,CAACI,UAAU,CAAC,CAAC,CAAC;;MAErBH,SAAS,CAAEY,MAAM,IAAK;QACpB;QACA,IAAI,CAACA,MAAM,CAACC,QAAQ,CAACV,UAAU,CAAC,EAAE;UAChC,OAAO,CAAC,GAAGS,MAAM,EAAET,UAAU,CAAC,CAAC,CAAC;QAClC;QACA,OAAOS,MAAM,CAAC,CAAC;MACjB,CAAC,CAAC;MAEFR,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,oBACEP,OAAA;IAAKiB,SAAS,EAAC,QAAQ;IAAAC,QAAA,eACrBlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,aAAa;MACzBC,EAAE,EAAE,GAAGjB,UAAU,GAAG,MAAM,GAAG,OAAO,EAAG;MACvCO,KAAK,EAAEL,UAAW;MAClBgB,QAAQ,EAAEd,YAAa;MACvBe,SAAS,EAAEX;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCIJ,SAA0B;AAAA2B,EAAA,GAA1B3B,SAA0B;AAqChC,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}