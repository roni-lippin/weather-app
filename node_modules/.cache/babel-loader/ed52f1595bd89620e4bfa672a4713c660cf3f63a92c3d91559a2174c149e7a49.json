{"ast":null,"code":"var _jsxFileName = \"/Users/ronili/Desktop/enter/code/weather-app/src/components/WindMap/WindMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS\nimport \"./windMap.css\";\nimport location from \"../location.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '00cf40eea985471c83c111501240409';\nconst WindMap = ({\n  city,\n  isDarkMode,\n  temp\n}) => {\n  _s();\n  const mapRef = useRef(null); // Store Leaflet map instance\n\n  useEffect(() => {\n    // Fetch city coordinates and initialize the map\n    const fetchCityCoordinates = async () => {\n      try {\n        const response = await fetch(`http://api.weatherapi.com/v1/current.json?q=${city}&key=${API_KEY}`);\n        const data = await response.json();\n        const {\n          lat,\n          lon\n        } = data.location;\n        initMap(lat, lon);\n      } catch (error) {\n        console.error(\"Error fetching city coordinates:\", error);\n      }\n    };\n\n    // Function to initialize the map\n    const initMap = (lat, lon) => {\n      // If map is already initialized, do not reinitialize\n      if (mapRef.current) {\n        mapRef.current.setView([lat, lon], 10); // Just update the view\n        return;\n      }\n\n      // Initialize the map if not already created\n      const map = L.map('wind-map', {\n        center: [lat, lon],\n        zoom: 10,\n        zoomControl: true // Default is \"topleft\"\n      });\n      mapRef.current = map; // Store map instance in ref\n\n      // Add OpenStreetMap tiles\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(map);\n    };\n    fetchCityCoordinates();\n  }, [city]); // Re-run the effect if the city changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `condition-wind-map ${isDarkMode ? 'dark' : 'light'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: location,\n        alt: \"Wind Icon\",\n        style: {\n          width: '20px',\n          height: '20px',\n          marginRight: '8px',\n          filter: 'invert(100%)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), \"MAP\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wind-map\",\n      className: \"wind-map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(WindMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = WindMap;\nexport default WindMap;\nvar _c;\n$RefreshReg$(_c, \"WindMap\");","map":{"version":3,"names":["React","useEffect","useRef","L","location","jsxDEV","_jsxDEV","API_KEY","WindMap","city","isDarkMode","temp","_s","mapRef","fetchCityCoordinates","response","fetch","data","json","lat","lon","initMap","error","console","current","setView","map","center","zoom","zoomControl","tileLayer","attribution","addTo","className","children","src","alt","style","width","height","marginRight","filter","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/ronili/Desktop/enter/code/weather-app/src/components/WindMap/WindMap.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS\nimport \"./windMap.css\";\nimport location from \"../location.svg\"\n\n\ninterface Props {\n  city: string;\n  isDarkMode: boolean;\n  temp: number\n}\n\nconst API_KEY = '00cf40eea985471c83c111501240409';\n\nconst WindMap: React.FC<Props> = ({ city, isDarkMode, temp }) => {\n  const mapRef = useRef<L.Map | null>(null); // Store Leaflet map instance\n\n  useEffect(() => {\n    // Fetch city coordinates and initialize the map\n    const fetchCityCoordinates = async () => {\n      try {\n        const response = await fetch(`http://api.weatherapi.com/v1/current.json?q=${city}&key=${API_KEY}`);\n        const data = await response.json();\n        \n        const { lat, lon } = data.location;\n        initMap(lat, lon);\n      } catch (error) {\n        console.error(\"Error fetching city coordinates:\", error);\n      }\n    };\n\n    // Function to initialize the map\n    const initMap = (lat: number, lon: number) => {\n      // If map is already initialized, do not reinitialize\n      if (mapRef.current) {\n        mapRef.current.setView([lat, lon], 10); // Just update the view\n        return;\n      }\n\n      // Initialize the map if not already created\n      const map = L.map('wind-map', {\n        center: [lat, lon],\n        zoom: 10,\n        zoomControl: true, // Default is \"topleft\"\n      });\n\n      mapRef.current = map; // Store map instance in ref\n\n      // Add OpenStreetMap tiles\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors',\n      }).addTo(map);\n    };\n\n    fetchCityCoordinates();\n  }, [city]); // Re-run the effect if the city changes\n\n  return (\n    <div className={`condition-wind-map ${isDarkMode ? 'dark' : 'light'}`}>\n      <h3>\n      <img src={location} alt=\"Wind Icon\" style={{ width: '20px', height: '20px', marginRight: '8px', filter: 'invert(100%)'}} />\n      MAP\n      </h3>\n      <div id=\"wind-map\" className=\"wind-map-container\"></div>\n    </div>\n  );\n};\n\nexport default WindMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}